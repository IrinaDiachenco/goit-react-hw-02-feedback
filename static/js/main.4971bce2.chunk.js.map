{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","data/constans.js","components/App/App.js","index.js"],"names":["Section","title","children","FeedbackButton","feedback","onLeaveFeedback","type","data-feedback","onClick","FeedbackOptions","options","map","option","Notification","message","Statistics","good","neutral","bad","total","positivePercantage","FEEDBACK_OPTIONS","App","state","handleFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositivePercantage","toFixed","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAiBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,oCACI,6BAAKD,IACHC,MCJRC,EAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAChC,OACI,wBAAQC,KAAK,SAASC,gBAAeH,EAAUI,QAASH,EAAxD,SACKD,KAaEK,EARS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASL,EAAsB,EAAtBA,gBAChC,OAAOK,EAAQC,KAAI,SAACC,GAAD,OAAY,cAAC,EAAD,CAAgBR,SAAUQ,EAAQP,gBAAiBA,QCTvE,SAASQ,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,8BAAMA,ICCf,IAyBeC,EAzBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACKD,EAAQ,GACL,+BACI,wCAAWH,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,UAGG,IAAVD,GAAe,cAACN,EAAD,CAAcC,QAAQ,0BCjBrCO,EAAmB,CAAC,OAAQ,UAAW,OC+CrCC,E,4MAtCXC,MAAQ,CACJP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTM,eAAiB,YAAiB,IACtBpB,EADqB,EAAbqB,OACYC,QAApBtB,SACR,EAAKuB,UAAS,SAACC,GAAD,sBAAkBxB,EAAWwB,EAAUxB,GAAY,O,EAGrEyB,mBAAqB,WAAO,IAAD,EACQ,EAAKN,MACpC,OAFuB,EACfP,KADe,EACTC,QADS,EACAC,K,EAI3BY,wBAA0B,SAACX,EAAOH,GAE9B,OADiBA,EAAOG,EAAS,KAClBY,W,uDAGT,IAAD,EAC0BC,KAAKT,MAA5BP,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IACjBC,EAAQa,KAAKH,qBACbT,EAAqBY,KAAKF,wBAAwBX,EAAOa,KAAKT,MAAMP,MAC1E,OACI,gCACA,cAAC,EAAD,CAASf,MAAM,wBAAf,SACI,cAAC,EAAD,CAAiBS,QAASW,EAAkBhB,gBAAiB2B,KAAKR,mBAEtE,cAAC,EAAD,CAASvB,MAAM,aAAf,SACI,cAAC,EAAD,CAAYe,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,mBAAoBA,a,GAhCpFa,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4971bce2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            { children}\r\n        </section >\r\n    )\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    //children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackButton = ({ feedback, onLeaveFeedback }) => {\r\n    return (\r\n        <button type='button' data-feedback={feedback} onClick={onLeaveFeedback}>\r\n            {feedback}\r\n        </button>\r\n    )\r\n};\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n    return options.map((option) => <FeedbackButton feedback={option} onLeaveFeedback={onLeaveFeedback} />)\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <div>{message}</div>;\r\n}\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Notification from '../Notification/Notification';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercantage }) => {\r\n    return (\r\n        <>\r\n            {total > 0 && (\r\n                <ul>\r\n                    <li>Good: {good}</li>\r\n                    <li>Neutral: {neutral}</li>\r\n                    <li>Bad: {bad}</li>\r\n                    <li>Total: {total}</li>\r\n                    <li>Positive feedback: {positivePercantage}%</li>\r\n                </ul>\r\n            )}\r\n            {total === 0 && <Notification message='No feedback given' />}\r\n        </>\r\n    )\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.string,\r\n};\r\n\r\nexport default Statistics;","export const FEEDBACK_OPTIONS = ['good', 'neutral', 'bad']","import React, { Component } from 'react';\r\n\r\nimport Section from '../Section/Section';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Statistics from '../Statistics/Statistics';\r\n\r\nimport { FEEDBACK_OPTIONS } from '../../data/constans';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0\r\n    };\r\n\r\n    handleFeedback = ({ target }) => {\r\n        const { feedback } = target.dataset\r\n        this.setState((prevState) => ({[feedback]: prevState[feedback] + 1}))\r\n    }\r\n\r\n    countTotalFeedback = () => {\r\n        const { good, neutral, bad } = this.state\r\n        return (good + neutral + bad)\r\n    }\r\n\r\n    countPositivePercantage = (total, good) => {\r\n        const percent = (good / total) * 100 \r\n        return percent.toFixed()\r\n    }\r\n\r\n    render() {\r\n        const { good, neutral, bad } = this.state\r\n        const total = this.countTotalFeedback()\r\n        const positivePercantage = this.countPositivePercantage(total, this.state.good)\r\n        return (\r\n            <div>\r\n            <Section title='Please leave feedback'>\r\n                <FeedbackOptions options={FEEDBACK_OPTIONS} onLeaveFeedback={this.handleFeedback} />\r\n            </Section>\r\n            <Section title='Statistics'>\r\n                <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercantage={positivePercantage} />\r\n            </Section>\r\n        </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}